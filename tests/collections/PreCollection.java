package collections;

import java.util.Iterator;

/**
 * Пред-коллекция. Содержит некое подмножество методов {@link java.util.Collection}, чтобы было проще реализовывать.
 * Хранит объекты типа {@link TestClass} для простоты тестирования.
 */
public interface PreCollection extends Iterable<TestClass> {
    /**
     * Добавляет в неизвестное место коллекции указанный элемент.
     * Что происходит, если такой элемент в коллекции уже есть, специфицирует конкретный класс.
     * @param element Элемент, который надо добавить.
     * @return {@code true}, если коллекция изменилась после этой операции, иначе {@code false}.
     */
    boolean add(TestClass element);

    /**
     * Удаляет все элементы из коллекции.
     */
    void clear();

    /**
     * Проверяет, есть ли объект, {@link java.util.Objects#equals(Object, Object) равный} данному в коллекции.
     * @param element Элемент, который нужно искать в коллекции.
     * @return {@code true}, если элемент найден, {@code false} иначе.
     */
    boolean contains(Object element);

    /**
     * Возвращает итератор, итерирующийся по всем элементам данной коллекции.
     * Порядок элементов не специфицирован (если данная коллекция не является объектом класса, который специфицирует порядок).
     * @return Итератор, итерирующийся по всем элементам коллекции.
     */
    Iterator<TestClass> iterator();

    /**
     * Проверка отсутствия элементов в коллекции.
     * @return {@code true}, если в коллекции ноль элементов, иначе {@code false}.
     */
    boolean isEmpty();

    /**
     * Удаляет из коллекции <b>один</b> элемент, {@link java.util.Objects#equals(Object, Object) равный} данному.
     * Какой конкретно элемент, если таких есть несколько, не специфицировано (если данная коллекция не является объектом класса, который это специфицирует).
     * Не меняет коллекцию, если такого элемента в списке нет.
     * @param element Элемент, равный которому надо удалить.
     * @return {@code true}, если элемент был в коллекции, {@code false} иначе.
     */
    boolean remove(Object element);

    /**
     * Возвращает количество элементов в коллекции.
     * Если оно больше, чем {@link Integer#MAX_VALUE}, возвращается {@link Integer#MAX_VALUE}.
     * @return количество элементов в коллекции.
     */
    int size();
}
